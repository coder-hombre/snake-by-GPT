<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Main.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.Random;&#10;import java.io.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // Get screen size&#10;        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();&#10;        int width = (int) (screenSize.width * 0.75);&#10;        int height = (int) (screenSize.height * 0.75);&#10;        JFrame frame = new JFrame(&quot;Snake Game&quot;);&#10;        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        frame.setResizable(false);&#10;        GamePanel panel = new GamePanel(width, height);&#10;        frame.add(panel);&#10;        frame.pack();&#10;        frame.setSize(width, height);&#10;        frame.setLocationRelativeTo(null);&#10;        frame.setVisible(true);&#10;    }&#10;}&#10;&#10;class GamePanel extends JPanel implements ActionListener {&#10;    int SCREEN_WIDTH;&#10;    int SCREEN_HEIGHT;&#10;    static final int UNIT_SIZE = 25;&#10;    static final int GAME_UNITS;&#10;    static final int DELAY = 75;&#10;    final int x[];&#10;    final int y[];&#10;    int bodyParts = 6;&#10;    int applesEaten;&#10;    int appleX;&#10;    int appleY;&#10;    char direction = 'R';&#10;    boolean running = false;&#10;    Timer timer;&#10;    Random random;&#10;&#10;    enum GameState { MENU, RUNNING, GAME_OVER }&#10;    GameState gameState = GameState.MENU;&#10;    JButton startButton;&#10;&#10;    int highScore = 0;&#10;    final String HIGH_SCORE_FILE = &quot;highscore.dat&quot;;&#10;&#10;    GamePanel(int width, int height) {&#10;        SCREEN_WIDTH = width;&#10;        SCREEN_HEIGHT = height;&#10;        GAME_UNITS = (SCREEN_WIDTH*SCREEN_HEIGHT)/(UNIT_SIZE*UNIT_SIZE);&#10;        x = new int[GAME_UNITS];&#10;        y = new int[GAME_UNITS];&#10;        random = new Random();&#10;        this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));&#10;        this.setBackground(Color.black);&#10;        this.setFocusable(true);&#10;        this.addKeyListener(new MyKeyAdapter());&#10;        setLayout(null);&#10;        setupMenu();&#10;        loadHighScore();&#10;    }&#10;&#10;    private void setupMenu() {&#10;        startButton = new JButton(&quot;Start Game&quot;);&#10;        startButton.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        startButton.setBounds(SCREEN_WIDTH/2 - 120, SCREEN_HEIGHT/2 - 40, 240, 80);&#10;        startButton.addActionListener(e -&gt; {&#10;            remove(startButton);&#10;            requestFocusInWindow();&#10;            startGame();&#10;        });&#10;        add(startButton);&#10;        repaint();&#10;    }&#10;&#10;    private void loadHighScore() {&#10;        try (DataInputStream dis = new DataInputStream(new FileInputStream(HIGH_SCORE_FILE))) {&#10;            highScore = dis.readInt();&#10;        } catch (IOException e) {&#10;            highScore = 0;&#10;        }&#10;    }&#10;&#10;    private void saveHighScore() {&#10;        if (applesEaten &gt; highScore) {&#10;            highScore = applesEaten;&#10;            try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(HIGH_SCORE_FILE))) {&#10;                dos.writeInt(highScore);&#10;            } catch (IOException e) {JOptionPane.showMessageDialog(this, &quot;Unable to save high score!\n&quot; + e.getMessage(), &quot;Save Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    public void startGame() {&#10;        newApple();&#10;        bodyParts = 6;&#10;        applesEaten = 0;&#10;        direction = 'R';&#10;        for (int i = 0; i &lt; x.length; i++) { x[i] = 0; y[i] = 0; }&#10;        gameState = GameState.RUNNING;&#10;        running = true;&#10;        timer = new Timer(DELAY, this);&#10;        timer.start();&#10;    }&#10;&#10;    public void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (gameState == GameState.MENU) {&#10;            drawMenu(g);&#10;        } else if (gameState == GameState.RUNNING) {&#10;            draw(g);&#10;        } else if (gameState == GameState.GAME_OVER) {&#10;            gameOver(g);&#10;        }&#10;    }&#10;&#10;    private void drawMenu(Graphics g) {&#10;        int buffer = 35;&#10;        // Draw high score at the top with buffer&#10;        g.setColor(Color.yellow);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        String highScoreText = &quot;High Score: &quot; + highScore;&#10;        g.drawString(highScoreText, (SCREEN_WIDTH - g.getFontMetrics().stringWidth(highScoreText)) / 2, buffer);&#10;        // Draw game title below high score&#10;        g.setColor(Color.green);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 60));&#10;        FontMetrics metrics = getFontMetrics(g.getFont());&#10;        g.drawString(&quot;Snake Game&quot;, (SCREEN_WIDTH - metrics.stringWidth(&quot;Snake Game&quot;)) / 2, buffer + 80);&#10;    }&#10;&#10;    public void draw(Graphics g) {&#10;        if (running) {&#10;            g.setColor(Color.red);&#10;            g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);&#10;&#10;            for (int i = 0; i &lt; bodyParts; i++) {&#10;                if (i == 0) {&#10;                    g.setColor(Color.green);&#10;                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);&#10;                } else {&#10;                    g.setColor(new Color(45, 180, 0));&#10;                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);&#10;                }&#10;            }&#10;            // Draw high score at the top with buffer&#10;            g.setColor(Color.yellow);&#10;            g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;            int buffer = 35;&#10;            String highScoreText = &quot;High Score: &quot; + highScore;&#10;            g.drawString(highScoreText, (SCREEN_WIDTH - g.getFontMetrics().stringWidth(highScoreText)) / 2, buffer);&#10;            // Draw current score below high score&#10;            g.setColor(Color.red);&#10;            g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 40));&#10;            FontMetrics metrics = getFontMetrics(g.getFont());&#10;            g.drawString(&quot;Score: &quot; + applesEaten, (SCREEN_WIDTH - metrics.stringWidth(&quot;Score: &quot; + applesEaten)) / 2, buffer + 40);&#10;        } else {&#10;            gameOver(g);&#10;        }&#10;    }&#10;&#10;    public void newApple() {&#10;        appleX = random.nextInt((int) (SCREEN_WIDTH / UNIT_SIZE)) * UNIT_SIZE;&#10;        appleY = random.nextInt((int) (SCREEN_HEIGHT / UNIT_SIZE)) * UNIT_SIZE;&#10;    }&#10;&#10;    public void move() {&#10;        for (int i = bodyParts; i &gt; 0; i--) {&#10;            x[i] = x[i - 1];&#10;            y[i] = y[i - 1];&#10;        }&#10;&#10;        switch (direction) {&#10;            case 'U':&#10;                y[0] = y[0] - UNIT_SIZE;&#10;                break;&#10;            case 'D':&#10;                y[0] = y[0] + UNIT_SIZE;&#10;                break;&#10;            case 'L':&#10;                x[0] = x[0] - UNIT_SIZE;&#10;                break;&#10;            case 'R':&#10;                x[0] = x[0] + UNIT_SIZE;&#10;                break;&#10;        }&#10;    }&#10;&#10;    public void checkApple() {&#10;        if ((x[0] == appleX) &amp;&amp; (y[0] == appleY)) {&#10;            bodyParts++;&#10;            applesEaten++;&#10;            newApple();&#10;        }&#10;    }&#10;&#10;    public void checkCollisions() {&#10;        // checks if head collides with body&#10;        for (int i = bodyParts; i &gt; 0; i--) {&#10;            if ((x[0] == x[i]) &amp;&amp; (y[0] == y[i])) {&#10;                running = false;&#10;            }&#10;        }&#10;        // check if head touches left border&#10;        if (x[0] &lt; 0) {&#10;            running = false;&#10;        }&#10;        // check if head touches right border&#10;        if (x[0] &gt;= SCREEN_WIDTH) {&#10;            running = false;&#10;        }&#10;        // check if head touches top border&#10;        if (y[0] &lt; 0) {&#10;            running = false;&#10;        }&#10;        // check if head touches bottom border&#10;        if (y[0] &gt;= SCREEN_HEIGHT) {&#10;            running = false;&#10;        }&#10;        if (!running) {&#10;            timer.stop();&#10;            gameState = GameState.GAME_OVER;&#10;            repaint();&#10;        }&#10;    }&#10;&#10;    public void gameOver(Graphics g) {&#10;        saveHighScore();&#10;        // Score&#10;        g.setColor(Color.red);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 40));&#10;        FontMetrics metrics1 = getFontMetrics(g.getFont());&#10;        g.drawString(&quot;Score: &quot; + applesEaten, (SCREEN_WIDTH - metrics1.stringWidth(&quot;Score: &quot; + applesEaten)) / 2, g.getFont().getSize());&#10;        // High Score&#10;        g.setColor(Color.yellow);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        g.drawString(&quot;High Score: &quot; + highScore, (SCREEN_WIDTH - g.getFontMetrics(g.getFont()).stringWidth(&quot;High Score: &quot; + highScore)) / 2, g.getFont().getSize() + 40);&#10;        // Game Over text&#10;        g.setColor(Color.red);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 75));&#10;        FontMetrics metrics2 = getFontMetrics(g.getFont());&#10;        g.drawString(&quot;Game Over&quot;, (SCREEN_WIDTH - metrics2.stringWidth(&quot;Game Over&quot;)) / 2, SCREEN_HEIGHT / 2);&#10;        // Restart instruction&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        g.setColor(Color.white);&#10;        g.drawString(&quot;Press ENTER to return to menu&quot;, (SCREEN_WIDTH - g.getFontMetrics(g.getFont()).stringWidth(&quot;Press ENTER to return to menu&quot;)) / 2, SCREEN_HEIGHT / 2 + 60);&#10;    }&#10;&#10;    @Override&#10;    public void actionPerformed(ActionEvent e) {&#10;        if (gameState == GameState.RUNNING &amp;&amp; running) {&#10;            move();&#10;            checkApple();&#10;            checkCollisions();&#10;        }&#10;        repaint();&#10;    }&#10;&#10;    public class MyKeyAdapter extends KeyAdapter {&#10;        @Override&#10;        public void keyPressed(KeyEvent e) {&#10;            if (gameState == GameState.RUNNING) {&#10;                switch (e.getKeyCode()) {&#10;                    case KeyEvent.VK_LEFT:&#10;                        if (direction != 'R') {&#10;                            direction = 'L';&#10;                        }&#10;                        break;&#10;                    case KeyEvent.VK_RIGHT:&#10;                        if (direction != 'L') {&#10;                            direction = 'R';&#10;                        }&#10;                        break;&#10;                    case KeyEvent.VK_UP:&#10;                        if (direction != 'D') {&#10;                            direction = 'U';&#10;                        }&#10;                        break;&#10;                    case KeyEvent.VK_DOWN:&#10;                        if (direction != 'U') {&#10;                            direction = 'D';&#10;                        }&#10;                        break;&#10;                }&#10;            } else if (gameState == GameState.GAME_OVER) {&#10;                if (e.getKeyCode() == KeyEvent.VK_ENTER) {&#10;                    gameState = GameState.MENU;&#10;                    setupMenu();&#10;                    repaint();&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.Random;&#10;import java.io.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // Get screen size&#10;        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();&#10;        int width = (int) (screenSize.width * 0.75);&#10;        int height = (int) (screenSize.height * 0.75);&#10;        JFrame frame = new JFrame(&quot;Snake Game&quot;);&#10;        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        frame.setResizable(false);&#10;        GamePanel panel = new GamePanel(width, height);&#10;        frame.add(panel);&#10;        frame.pack();&#10;        frame.setSize(width, height);&#10;        frame.setLocationRelativeTo(null);&#10;        frame.setVisible(true);&#10;    }&#10;}&#10;&#10;class GamePanel extends JPanel implements ActionListener {&#10;    int SCREEN_WIDTH;&#10;    int SCREEN_HEIGHT;&#10;    static final int UNIT_SIZE = 25;&#10;    int GAME_UNITS;&#10;    static final int DELAY = 75;&#10;    final int x[];&#10;    final int y[];&#10;    int bodyParts = 6;&#10;    int applesEaten;&#10;    int appleX;&#10;    int appleY;&#10;    char direction = 'R';&#10;    boolean running = false;&#10;    Timer timer;&#10;    Random random;&#10;&#10;    enum GameState { MENU, RUNNING, GAME_OVER }&#10;    GameState gameState = GameState.MENU;&#10;    JButton startButton;&#10;&#10;    int highScore = 0;&#10;    final String HIGH_SCORE_FILE = &quot;highscore.dat&quot;;&#10;&#10;    GamePanel(int width, int height) {&#10;        SCREEN_WIDTH = width;&#10;        SCREEN_HEIGHT = height;&#10;        GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / (UNIT_SIZE * UNIT_SIZE);&#10;        x = new int[GAME_UNITS];&#10;        y = new int[GAME_UNITS];&#10;        random = new Random();&#10;        this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));&#10;        this.setBackground(Color.black);&#10;        this.setFocusable(true);&#10;        this.addKeyListener(new MyKeyAdapter());&#10;        setLayout(null);&#10;        setupMenu();&#10;        loadHighScore();&#10;    }&#10;&#10;    private void setupMenu() {&#10;        startButton = new JButton(&quot;Start Game&quot;);&#10;        startButton.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        startButton.setBounds(SCREEN_WIDTH/2 - 120, SCREEN_HEIGHT/2 - 40, 240, 80);&#10;        startButton.addActionListener(e -&gt; {&#10;            remove(startButton);&#10;            requestFocusInWindow();&#10;            startGame();&#10;        });&#10;        add(startButton);&#10;        repaint();&#10;    }&#10;&#10;    private void loadHighScore() {&#10;        try (DataInputStream dis = new DataInputStream(new FileInputStream(HIGH_SCORE_FILE))) {&#10;            highScore = dis.readInt();&#10;        } catch (IOException e) {&#10;            highScore = 0;&#10;        }&#10;    }&#10;&#10;    private void saveHighScore() {&#10;        if (applesEaten &gt; highScore) {&#10;            highScore = applesEaten;&#10;            try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(HIGH_SCORE_FILE))) {&#10;                dos.writeInt(highScore);&#10;            } catch (IOException e) {JOptionPane.showMessageDialog(this, &quot;Unable to save high score!\n&quot; + e.getMessage(), &quot;Save Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    public void startGame() {&#10;        newApple();&#10;        bodyParts = 6;&#10;        applesEaten = 0;&#10;        direction = 'R';&#10;        for (int i = 0; i &lt; x.length; i++) { x[i] = 0; y[i] = 0; }&#10;        gameState = GameState.RUNNING;&#10;        running = true;&#10;        timer = new Timer(DELAY, this);&#10;        timer.start();&#10;    }&#10;&#10;    public void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (gameState == GameState.MENU) {&#10;            drawMenu(g);&#10;        } else if (gameState == GameState.RUNNING) {&#10;            draw(g);&#10;        } else if (gameState == GameState.GAME_OVER) {&#10;            gameOver(g);&#10;        }&#10;    }&#10;&#10;    private void drawMenu(Graphics g) {&#10;        int buffer = 35;&#10;        // Draw high score at the top with buffer&#10;        g.setColor(Color.yellow);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        String highScoreText = &quot;High Score: &quot; + highScore;&#10;        g.drawString(highScoreText, (SCREEN_WIDTH - g.getFontMetrics().stringWidth(highScoreText)) / 2, buffer);&#10;        // Draw game title below high score&#10;        g.setColor(Color.green);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 60));&#10;        FontMetrics metrics = getFontMetrics(g.getFont());&#10;        g.drawString(&quot;Snake Game&quot;, (SCREEN_WIDTH - metrics.stringWidth(&quot;Snake Game&quot;)) / 2, buffer + 80);&#10;    }&#10;&#10;    public void draw(Graphics g) {&#10;        if (running) {&#10;            g.setColor(Color.red);&#10;            g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);&#10;&#10;            for (int i = 0; i &lt; bodyParts; i++) {&#10;                if (i == 0) {&#10;                    g.setColor(Color.green);&#10;                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);&#10;                } else {&#10;                    g.setColor(new Color(45, 180, 0));&#10;                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);&#10;                }&#10;            }&#10;            // Draw high score at the top with buffer&#10;            g.setColor(Color.yellow);&#10;            g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;            int buffer = 35;&#10;            String highScoreText = &quot;High Score: &quot; + highScore;&#10;            g.drawString(highScoreText, (SCREEN_WIDTH - g.getFontMetrics().stringWidth(highScoreText)) / 2, buffer);&#10;            // Draw current score below high score&#10;            g.setColor(Color.red);&#10;            g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 40));&#10;            FontMetrics metrics = getFontMetrics(g.getFont());&#10;            g.drawString(&quot;Score: &quot; + applesEaten, (SCREEN_WIDTH - metrics.stringWidth(&quot;Score: &quot; + applesEaten)) / 2, buffer + 40);&#10;        } else {&#10;            gameOver(g);&#10;        }&#10;    }&#10;&#10;    public void newApple() {&#10;        appleX = random.nextInt((int) (SCREEN_WIDTH / UNIT_SIZE)) * UNIT_SIZE;&#10;        appleY = random.nextInt((int) (SCREEN_HEIGHT / UNIT_SIZE)) * UNIT_SIZE;&#10;    }&#10;&#10;    public void move() {&#10;        for (int i = bodyParts; i &gt; 0; i--) {&#10;            x[i] = x[i - 1];&#10;            y[i] = y[i - 1];&#10;        }&#10;&#10;        switch (direction) {&#10;            case 'U':&#10;                y[0] = y[0] - UNIT_SIZE;&#10;                break;&#10;            case 'D':&#10;                y[0] = y[0] + UNIT_SIZE;&#10;                break;&#10;            case 'L':&#10;                x[0] = x[0] - UNIT_SIZE;&#10;                break;&#10;            case 'R':&#10;                x[0] = x[0] + UNIT_SIZE;&#10;                break;&#10;        }&#10;    }&#10;&#10;    public void checkApple() {&#10;        if ((x[0] == appleX) &amp;&amp; (y[0] == appleY)) {&#10;            bodyParts++;&#10;            applesEaten++;&#10;            newApple();&#10;        }&#10;    }&#10;&#10;    public void checkCollisions() {&#10;        // checks if head collides with body&#10;        for (int i = bodyParts; i &gt; 0; i--) {&#10;            if ((x[0] == x[i]) &amp;&amp; (y[0] == y[i])) {&#10;                running = false;&#10;            }&#10;        }&#10;        // check if head touches left border&#10;        if (x[0] &lt; 0) {&#10;            running = false;&#10;        }&#10;        // check if head touches right border&#10;        if (x[0] &gt;= SCREEN_WIDTH) {&#10;            running = false;&#10;        }&#10;        // check if head touches top border&#10;        if (y[0] &lt; 0) {&#10;            running = false;&#10;        }&#10;        // check if head touches bottom border&#10;        if (y[0] &gt;= SCREEN_HEIGHT) {&#10;            running = false;&#10;        }&#10;        if (!running) {&#10;            timer.stop();&#10;            gameState = GameState.GAME_OVER;&#10;            repaint();&#10;        }&#10;    }&#10;&#10;    public void gameOver(Graphics g) {&#10;        saveHighScore();&#10;        // Score&#10;        g.setColor(Color.red);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 40));&#10;        FontMetrics metrics1 = getFontMetrics(g.getFont());&#10;        g.drawString(&quot;Score: &quot; + applesEaten, (SCREEN_WIDTH - metrics1.stringWidth(&quot;Score: &quot; + applesEaten)) / 2, g.getFont().getSize());&#10;        // High Score&#10;        g.setColor(Color.yellow);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        g.drawString(&quot;High Score: &quot; + highScore, (SCREEN_WIDTH - g.getFontMetrics(g.getFont()).stringWidth(&quot;High Score: &quot; + highScore)) / 2, g.getFont().getSize() + 40);&#10;        // Game Over text&#10;        g.setColor(Color.red);&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 75));&#10;        FontMetrics metrics2 = getFontMetrics(g.getFont());&#10;        g.drawString(&quot;Game Over&quot;, (SCREEN_WIDTH - metrics2.stringWidth(&quot;Game Over&quot;)) / 2, SCREEN_HEIGHT / 2);&#10;        // Restart instruction&#10;        g.setFont(new Font(&quot;Ink Free&quot;, Font.BOLD, 30));&#10;        g.setColor(Color.white);&#10;        g.drawString(&quot;Press ENTER to return to menu&quot;, (SCREEN_WIDTH - g.getFontMetrics(g.getFont()).stringWidth(&quot;Press ENTER to return to menu&quot;)) / 2, SCREEN_HEIGHT / 2 + 60);&#10;    }&#10;&#10;    @Override&#10;    public void actionPerformed(ActionEvent e) {&#10;        if (gameState == GameState.RUNNING &amp;&amp; running) {&#10;            move();&#10;            checkApple();&#10;            checkCollisions();&#10;        }&#10;        repaint();&#10;    }&#10;&#10;    public class MyKeyAdapter extends KeyAdapter {&#10;        @Override&#10;        public void keyPressed(KeyEvent e) {&#10;            if (gameState == GameState.RUNNING) {&#10;                switch (e.getKeyCode()) {&#10;                    case KeyEvent.VK_LEFT:&#10;                        if (direction != 'R') {&#10;                            direction = 'L';&#10;                        }&#10;                        break;&#10;                    case KeyEvent.VK_RIGHT:&#10;                        if (direction != 'L') {&#10;                            direction = 'R';&#10;                        }&#10;                        break;&#10;                    case KeyEvent.VK_UP:&#10;                        if (direction != 'D') {&#10;                            direction = 'U';&#10;                        }&#10;                        break;&#10;                    case KeyEvent.VK_DOWN:&#10;                        if (direction != 'U') {&#10;                            direction = 'D';&#10;                        }&#10;                        break;&#10;                }&#10;            } else if (gameState == GameState.GAME_OVER) {&#10;                if (e.getKeyCode() == KeyEvent.VK_ENTER) {&#10;                    gameState = GameState.MENU;&#10;                    setupMenu();&#10;                    repaint();&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>